<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://alaskasquirrel.github.io</id>
    <title>NewOld </title>
    <updated>2020-07-13T15:18:58.755Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://alaskasquirrel.github.io"/>
    <link rel="self" href="https://alaskasquirrel.github.io/atom.xml"/>
    <subtitle>Plan in decade. Think in years. Work in months. Live in days.</subtitle>
    <logo>https://alaskasquirrel.github.io/images/avatar.png</logo>
    <icon>https://alaskasquirrel.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, NewOld </rights>
    <entry>
        <title type="html"><![CDATA[[翻译] Blockchain: Application Considerations]]></title>
        <id>https://alaskasquirrel.github.io/post/blockchain-application-considerations/</id>
        <link href="https://alaskasquirrel.github.io/post/blockchain-application-considerations/">
        </link>
        <updated>2020-07-11T02:37:33.000Z</updated>
        <content type="html"><![CDATA[<p>原文：<a href="https://doi.org/10.6082/NIST.IR.8202">Blockchain Technology Overview</a> National Institute of Standards and Technology</p>
<p>  由于区块链技术仍然是新技术，许多组织正在寻找兼容的方法运用在自身的商业中。人们非常担心错过这项技术。组织机构将这个问题视为“我们想在某个地方使用区块链，我们可以在哪里使用? 这导致了人们对这项技术的失望，因为它不能得到普遍应用。最好的方法是首先了解区块链技术，了解其适用范围，然后再进行分析。确定可能适合区块链范式的系统。<br>
  如果活动或系统需要以下特性，则区块链技术解决方案可能适用：</p>
<ul>
<li>多参与者</li>
<li>分布式参与者</li>
<li>需要或缺乏可信任的第三方</li>
<li>工作流本质上是事务性的(例 数字资产/信息之间的传输方)</li>
<li>需要一个全球稀缺的数字标识符(例 数字艺术，数字土地，数字属性)</li>
<li>需要分散命名服务或有序注册</li>
<li>需要一个加密安全的所有权系统</li>
<li>需要减少或消除调解和争端解决的人工努力</li>
<li>需要实时监控监管者和被监管者之间的活动实体</li>
<li>需要完整的数字资产来源和完整的交易历史被共享在参与者</li>
</ul>
<p>  一些机构和组织已经制定了指南来帮助确定区块链是否是适合于特定的系统或活动，以及属于哪种区块链技术获得最大的好处。在本节中，一些文章和建议从几个不同的突出部门-联邦政府，学术界，技术出版物，技术网站和软件开发人员。<br>
  美国国土安全部(DHS)科技理事会一直在研究区块链技术，并创建了一个流程图来帮助确定开发活动是否需要区块链。流程图重新绘制得以如下展现<br>
<img src="https://alaskasquirrel.github.io/post-images/1594435242668.png" alt="" loading="lazy"></p>
<ul>
<li>(图片 United States Department of Homeland Security Science &amp; Technology Directorate)</li>
</ul>
<h3 id="特殊的区块链注意事项">特殊的区块链注意事项：</h3>
<p>  在决定是否使用区块链时，必须考虑其他因素，并确定这些因素是否限制了一个人使用区块链或特定类型的区块链:</p>
<ul>
<li>Data Visibility<br>
* 允许的区块链网络可能显示也可能不显示区块链数据公开。该数据可能只对那些在区块链网络内的人可用。考虑数据可能遵循某些法规(例如个人可识别资料(PII)或一般资料保障规例(GDPR)规章)。这样的数据可能适合存储，也可能不适合存储，即使是在区块链网络中。<br>
* 允许的区块链网络可以允许任何人检查和贡献区块链。这些数据通常是公开的。这就引出了几个问题必须被考虑。应用程序的数据是否需要可用每个人吗?拥有公共数据有什么危害吗?</li>
<li>Full transactional history<br>
一些区块链网络提供的完整公共历史数字资产——从创作到包含其中的每一笔交易。这个特性可能是对某些解决方案有利，对其他解决方案不利。</li>
<li>Fake Data Input<br>
  由于多个用户都参与了区块链，有些人可能会参与提交假数据，模拟来自有效来源的数据(如传感器数据)。是很困难的自动验证进入区块链网络的数据。聪明的合同实现可能提供额外的检查来帮助验证数据</li>
<li>Tamper evident and tamper resistant data<br>
  许多应用程序遵循“CRUD”(创建，读取，更新，删除)功能的数据。有区块链，就只有CR(创建、读取)。有一些方法可以用来“弃用”较旧的数据找到了较新的版本，但是没有对原始数据的删除过程。通过使用新的事务可以修改和更新以前的事务，同时可以更新数据提供完整的历史。但是，即使一个新事务标记了一个旧事务作为“已删除”—数据仍然会出现在区块链数据中，即使它不是显示在处理数据的应用程序中。</li>
<li>Transactions Per Second<br>
  事务处理速度高度依赖于共识模型使用。目前交易在许多不允许的区块链网络的执行速度与其他信息技术解决方案的执行速度不同块的发布时间会变慢(通常以秒为单位，但有时也会这样分钟)。因此，依赖于区块链的应用程序在等待数据被提交时可能会出现一些减速。人们必须问他们的应用程序是否可以处理相对较慢的速度事务处理?</li>
<li>Compliance<br>
  使用区块链技术不排除一个系统遵守任何适用的法律法规。例如，有许多遵从性与确定的PII或GDPR相关的立法和政策的考虑某些信息不应该放在区块链上。此外,某些各国可能会限制跨其地理区域传输的数据类型边界。在其他情况下，某些立法可能规定金融事务必须写入其边界内的节点。在在这些情况下，公共的，不允许的连锁可能是不太合适的满足监管需要的许可的或混合的方法。法律法规的另一个例子是任何区块链网络管理联邦记录。联邦档案要遵守许多法律法规联邦机构本身在使用时必须遵循具体的联邦指导方针区块链技术。</li>
<li>Permissions —— 对于被许可的区块链网络，有一些考虑自己的权限<br>
* Granularity-系统内的权限是否允许足够的粒度针对用户可能需要的特定角色(以类似基于角色的访问方式)控制方法)在系统内执行操作<br>
Permissioned 区块链网络允许等更为传统的角色 管理员、用户、验证者、审核员等。<br>
* Administration——谁可以管理权限?一旦权限对用户进行管理，可以轻易地撤消它们吗?</li>
<li>Node Diversity—— 一个区块链网络仅仅是所有的集合参与网络的现有节点。如果所有节点共享类似的硬件，软件、地理位置和消息传递模式存在一定数量与未发现的安全漏洞的可能性相关的风险。这种风险是通过分散化的网络异构设备减轻，哪些可以定义为“任何一个节点与广义集”</li>
</ul>
<p>CoinDesk: <a href="https://www.coindesk.com/dont-use-blockchain-unless-really-need-one">Don’t Use a Blockchain Unless You Really Need One</a>, Jan 2018.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[能源变革，悄无声息]]></title>
        <id>https://alaskasquirrel.github.io/post/earth/</id>
        <link href="https://alaskasquirrel.github.io/post/earth/">
        </link>
        <updated>2020-07-10T13:03:03.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>(封面 https://pixabay.com/）</p>
</li>
<li>
<p>据Fraunhofer 研究所的报告，2018年德国可更新能源的发电量首次超过了煤炭发电。德国作为欧洲最大的经济体，原定到 2030 年由可更新能源提供 65% 的电力，且预到 2022 年完全退出核能，并计划逐步淘汰煤炭。研究显示，去年德国太阳能、风能、生物质能和水电产生了 219 TWh 的电力，占到了总发电量 542 TWh 的四成以上，超过了煤炭的 38%。研究人员认为 2019 年可更新能源的发电量同样不会低于四成。</p>
</li>
<li>
<p>2019年6月，英国国家电网表示，本年前五个月，来自清洁能源发电量占到了 48% ，超过了煤炭和天然气的 47%，其余是生物质燃烧。英国国家电网称，煤炭的发电量过去十年从 30% 降至了 3%，而风能从 1% 提高到 19%。同时英国还从欧洲大陆进口了一部分电，主要来自法国核电。英国估计到 2030 年清洁能源来源将占到九成。</p>
</li>
<li>
<p>2020年6月10日，到周三的午夜，英国已经两个整月没有用燃煤发电。而在十年前，英国四成的电力来自煤炭，新冠是故事的一部分，但不是全部。为遏制疫情快速扩散，英国实施了封锁政策，电力需求大幅下跌，国家电网随后从电网中下线了部分发电厂，而英国最后的 4 座燃煤发电厂是首当其冲遭到关闭的。最后的燃煤发电站离线是在 4 月 9 日午夜，无火电的情况一直持续至今。十年前，英国 3% 的电力来自风力和太阳能，今天英国有着世界规模最大的离岸风电行业。十年前的英国最大燃煤发电厂如今已经转向了压缩木球。</p>
</li>
<li>
<p>受新冠疫情的影响，美国可更新能源发电量今年有望首次超过燃煤火电。这一结果在十年前是无法想象的，当时美国的电力需求近半是由火电供应。随着风力电场和太阳能的建造成本降低，经济力量驱动了火电的减少，疫情更是将美国的煤电行业推入深渊。为遏制病毒的扩散，美国的经济活动大幅下降，工厂、零售商、办公楼纷纷关闭，电力需求相应的也大幅减少，由于煤电的运营成本比燃气和可更新能源更高，电力公司因此关闭了燃煤发电厂。今年已经有 90 天美国的风电、太阳能和水电发电量超过了煤电。在过去十年里，可再生能源的成本急剧下降，一直超过专家的预期。从2009年到2019年，风力发电的成本下降了70%，而大型太阳能的成本下降了近90，2010年到2019年，太阳能电池成本也下降了近90%。<br>
<img src="https://alaskasquirrel.github.io/post-images/1594469598317.jpg" alt="" loading="lazy"><br>
图为美国国家可再生能源实验室的年度技术基准(ATB)对未来风能和太阳能的成本预测。从图中可以看出，风能和太阳能发电的成本下降速度一直都过预期。(https://www.2035report.com/)<br>
<img src="https://alaskasquirrel.github.io/post-images/1594470068960.jpg" alt="" loading="lazy"></p>
</li>
</ul>
<p>消息来源：</p>
<ul>
<li>https://www.reuters.com/article/us-germany-power-renewables/renewables-overtake-coal-as-germanys-main-energy-source-idUSKCN1OX0U2</li>
<li>https://www.bbc.com/news/science-environment-48711649</li>
<li>https://www.bbc.com/news/science-environment-52973089</li>
<li>https://www.nytimes.com/2020/05/13/climate/coronavirus-coal-electricity-renewables.html</li>
</ul>
<p>悄无声息：</p>
<ul>
<li><a href="https://spectrum.ieee.org/energy/nuclear/too-cheap-to-meter-nuclear-power-revisited">After 50 years of operation, nuclear electric generation is still having teething pains</a></li>
<li><a href="https://spectrum.ieee.org/energywise/energy/nuclear/a-double-first-in-china-for-advanced-nuclear-reactors">Safer reactors designed in the U.S. and Europe make their power grid debuts in China</a></li>
<li><a href="https://thebulletin.org/2019/12/good-news-for-climate-change-india-gets-out-of-coal-and-into-renewable-energy/">Good news for climate change: India gets out of coal and into renewable energy<br>
</a></li>
<li><a href="https://thebulletin.org/2013/06/nuclear-aging-not-so-graceful/">Nuclear aging: Not so graceful<br>
</a></li>
<li><a href="https://chinadialogue.net/en/energy/5808-chinese-nuclear-disaster-highly-probable-by-2-3/">Chinese nuclear disaster “highly probable” by 2030<br>
</a></li>
<li><a href="https://www.theguardian.com/world/2015/may/25/china-nuclear-power-plants-expansion-he-zuoxiu">China warned over 'insane' plans for new nuclear power plants<br>
</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Self-Driving Car, 漫谈人工智能]]></title>
        <id>https://alaskasquirrel.github.io/post/self-driving/</id>
        <link href="https://alaskasquirrel.github.io/post/self-driving/">
        </link>
        <updated>2020-05-24T19:14:54.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>（封面 https://www.landmarkdividend.com/self-driving-car/）</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://alaskasquirrel.github.io/post-images/1594375460765.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://alaskasquirrel.github.io/post-images/1594322160914.gif" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://alaskasquirrel.github.io/post-images/1594322178933.gif" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://alaskasquirrel.github.io/post-images/1594322191191.gif" alt="" loading="lazy"></figure>
<p>Reference:</p>
<ul>
<li>图片 https://www.thesimpledollar.com/insurance/auto/how-self-driving-cars-work</li>
<li>https://www.tesla.com/autopilot</li>
<li>https://blogs.nvidia.com/blog/2019/04/15/how-does-a-self-driving-car-see/</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[翻译] History of Symbolics lisp machines]]></title>
        <id>https://alaskasquirrel.github.io/post/history-of-symbolics-lisp-machines/</id>
        <link href="https://alaskasquirrel.github.io/post/history-of-symbolics-lisp-machines/">
        </link>
        <updated>2020-05-23T16:39:55.000Z</updated>
        <content type="html"><![CDATA[<p>原文：<a href="https://danluu.com/symbolics-lisp-machines/">History of Symbolics lisp machines</a>. This is an archive of Dan Weinreb's comments on Symbolics and Lisp machines.<br>
译文：</p>
<h3 id="rebuttal-to-stallmans-story-about-the-formation-of-symbolics-and-lmi">Rebuttal to Stallman’s Story About The Formation of Symbolics and LMI</h3>
<p>  多年来，Richard Stallman 一直在讲述一个关于Lisp Machine 公司的起源，以及它对 M.I.T Artificial Intelligence Lab 影响力的故事。他将其发表在一本书和一篇被广泛引用的论文中，您可以在 https://www.gnu.org/gnu/rms-lisp.html 上找到这篇论文。<br>
  Richard Stallman 的叙述有很大的偏见，在很多地方完全错误。以下是我对实际发生的事情的看法。<br>
  Richard Greenblatt 提议成立Lisp Machine 公司的两个前提。首先，不应该有外部投资（这是完全不现实的: 一家制造计算机硬件的公司需要资金）。其次，Richard Greenblatt 本人将担任CEO。Lisp Machine 项目的其他成员对 Greenblatt 管理公司的能力深为怀疑。于是，Richard Greenblatt 和其他人分道扬镳，成立了两家公司。<br>
  Stallman 将其描述为“暗箭伤人”，并认为 Symbolic 绝非 &quot;肆无忌惮&quot;，这纯粹是废话。这里没有任何的背后中伤。Symbolics 是极其严谨的。Stallman对于Symbolics的描述”寻求摧毁“LMI，这纯粹是幻想。<br>
  Stallman 声称 Symbolics &quot;雇佣了所有黑客&quot;，&quot;致使MIT AI Lab 无人可用&quot;,&quot;没人预想到AI Lab 的黑客团队就此消失&quot;，Symbolics ”消灭了MIT“。首先，仅此一家Lisp Machine 公司便如Stallman所料了，这些人终将离开 AI Lab。其次，Symbolics 仅仅从 AI Lab雇佣了四名全职和一位兼职人员(见下文)。<br>
  Stallman 接着说:“Symbolics 想出了一个计划。他们对 AI Lab说，‘我们会继续对系统进行修改，供你们使用，但你们不能把它放进MIT Lisp machine 系统。相反，我们将允许您访问Symbolics的Lisp machine系统，您可以运行它，但这就是您所能做的。’”换句话说，Symbolics开发的软件并不是免费提供给LMI的。这有那么令人惊讶吗?无论如何，这不是Symbolics的“计划”;这是MIT许可协议的一部分，与LMI签署的协议完全相同。LMI的改变也都是LMI专有的。<br>
  接着，他说:“过了一段时间，我得出了一个结论，那就是我甚至不去看他们的代码都是最好的。当他们发布了一个beta版的公告并给出了发布说明时，我会看看有哪些特性，然后去实现它们。等到他们发布真正的版本时，我也这么做了。“首先，他真的在看Symbolics代码;我们发现他做了好几次。其次，即使他没有，复制别人已经设计的东西也比自己设计要容易得多。他复制的是增量改进:这里有一个新的编辑器命令，那里有一个新的Lisp实用程序。这只是Symbolics公司软件开发的一小部分。<br>
  他将此描述为“惩罚”Symbolics 是愚蠢的。他所做的对Symbolics没有任何影响。在现实生活中，Symbolics很少与LMI竞争销售。LMI的存在与Symbolics的底线关系不大。<br>
  我要澄清的是，最初的(TECO-based)Emacs是由Guy L. Steele Jr.和David Moon创建和设计的。在他们让它工作之后，它已经成为 AI Lab的标准文本编辑器，Stallman接管了它的维护工作。<br>
   以下是Symbolics创始人的名单。请注意，Bruce Edwards 和我曾在MIT AI Lab 共事过，但是在Symbolics创立之前，且他们已离开那里去他处工作了。Henry Baker 并非Stallman 所提记得黑客。</p>
<ul>
<li>Robert Adams (original CEO, California)<br>
Russell Noftsker (CEO thereafter)<br>
Minoru Tonai (CFO, California)<br>
John Kulp (from MIT Plasma Physics Lab)<br>
Tom Knight (from MIT AI Lab)<br>
Jack Holloway (from MIT AI Lab)<br>
David Moon (half-time as MIT AI Lab)<br>
Dan Weinreb (from Lawrence Livermore Labs)<br>
Howard Cannon (from MIT AI Lab)<br>
Mike McMahon (from MIT AI Lab)<br>
Jim Kulp (from IIASA, Vienna)<br>
Bruce Edwards (from IIASA, Vienna)<br>
Bernie Greenberg (from Honeywell CISL)<br>
Clark Baker (from MIT LCS)<br>
Chris Terman (from MIT LCS)<br>
John Blankenbaker (hardware engineer, California)<br>
Bob Williams (hardware engineer, California)<br>
Bob South (hardware engineer, California)<br>
Henry Baker (from MIT)<br>
Dave Dyer (from USC ISI)<br>
<img src="https://alaskasquirrel.github.io/post-images/1594056215160.jpg" alt="" loading="lazy"></li>
</ul>
<h3 id="why-did-symbolics-fail">Why Did Symbolics Fail?</h3>
<p>  在此前的一篇博文的评论中，有人问我为什么Symbolics失败。下面的内容过于简单，但应该足够好了。我非常欢迎老朋友发表评论，并对其进行修改或添加，当然也邀请每个人发表评论。<br>
  首先，请注意在1980年左右Symbolics开始出现的时候，多数的计算机用户使用分时系统。一个人拥有一台完整的电脑的想法是大胆的，几乎是异端邪说。每家电脑公司(Prime、Data General、DEC)都有自己的硬件和软件套件。那时没有pc，没有Mac，没有工作站。MIT AI Lab，15名研究人员共享一台CPU为0.0001 GHz、主存为0.0002 GB的计算机。<br>
  Symbolics销售给两种类型的客户，我称之为主要客户和次要客户。主要客户使用 Lisp Machine 作为软件开发环境。最初的目标市场是MIT AI Lab自己，随后是类似的机构:大学、企业研究实验室等等。次要客户使用Lisp machine运行由其他方编写的应用程序。<br>
  我们在主要客户中取得了巨大的成功。我想如果我们的市场营销做得更好的话，我们会创造更多这样的产品。例如，您是否知道Symbolics为Fortran、C、Ada和其他流行语言提供了世界级的软件开发环境，在编辑器中具有惊人的语义理解能力、强大的调试器、语言之间相互调用的能力等等?我们在这上面花了很多功夫，但从来没有宣传过。<br>
  但我们知道，真正成功的唯一途径是开发二级市场。ICAD制作了一个先进的基于约束的计算机辅助设计系统，该系统只在Symbolics机器上运行。可悲的是，他们是唯一一家这样做的公司。为什么?<br>
  世界改变很快。新的“工作站”类型的计算机出现了:Suns和Apollos等等。实现Lisp的新技术被发明，它允许好的Lisp实现在传统的硬件上运行;虽然不如我们的好，但对于大多数用途来说已经足够好了。因此，我们特殊的Lisp体系结构的真正增值突然减少了。大量有用的Unix软件出现了，并且在Unix工作站之间是可移植的:每个供应商不再需要开发整个软件套件。而工作站厂商也开始利用 Intel、Motorola和IBM生产的速度越来越快、价格越来越便宜的CPU，Symbolics很难跟上这些厂商的步伐。我们对这一点承认得很慢。我们相信自己的“教条”，即使它变得不那么真实。它根植于我们的企业文化中。如果你提出异议，你的同事会觉得你“就是不明白”，可以说你不是“家族”中的一员。这抑制了客观分析。(这是一个很容易陷入的问题——不要让它发生在你身上!)<br>
  二级市场经常有他们需要使用工作站(后来是PC)硬件的原因。他们通常需要与其他不能在Symbolics运行的软件进行交互。或者他们想要与其他没有在Symbolics上运行的应用程序共享硬件成本。与“通用”Unix工作站(以及后来的Windows pc)相比，Symbolics machine 被视为“特殊用途的硬件”。它们价格昂贵，但不能用于越来越多的Unix软件。很少有厂商想要制造一种只能在“专用硬件”上运行的产品。(谢谢,ICAD;我们爱你!)<br>
  而且，许多Symbolics的销售都是基于基于规则的专家系统的承诺，早期的例子是用Lisp编写的。基于规则的专家系统是一个很好的东西，目前得到了广泛的应用(但通常不在Lisp中)。但是它们被某些学者和他们的行业大肆宣传，导致了1988年前后的巨大反弹。“人工智能”失宠;“冬天”来临。<br>
  (Symbolics确实推出了自己的努力，为PC生产一种名为CLOE的Lisp，并且还与其他Lisp公司合作，特别是Gold Hill，这样客户就可以在Symbolics上开发并部署在传统的机器上。我们不是完全愚蠢的。最重要的是，人们对Lisp的兴趣下降太多了。)<br>
  与此同时，在Symbolics公司，出现了巨大的内部管理冲突，导致很多高层管理人员辞职，他们被董事会取代，取而代之的是新CEO，这些CEO表现不佳，也没有远见了解发生了什么。Symbolics公司签下了大型新办公室和新工厂的长期租约，预期增长并未到来，但由于办公空间过剩，耗费了大量资金，无法转租这些物业。有几轮裁员。我们中越来越多的人意识到发生了什么，而Symbolics并没有反应。在为Lisp创建了一个名为Statice的面向对象数据库系统之后，我在1988年和几个同事离开，成立了Object Design, Inc.，为全新的主流面向对象语言c++创建了一个面向对象的数据库系统。(该公司非常成功，目前作为Progress Software的ObjectStore分部存在(www.objectstore.com)。我期待着明年夏天的二十年同学会。)<br>
  Symbolics确实试图处理这种情况，首先通过制造可以连接到传统计算机的插件板 Lisp machine。一个问题是，他们一直押错了赌注。MacIvory是Symbolics Ivory芯片(是的，我们自己做CPU芯片)，可以插入到Macintosh上的NuBus(早就没了,且不是主流平台)。后来，他们最终放弃了与大型芯片制造商的竞争，转而使用一家主要制造商的快速芯片制造了插电板:DEC Alpha架构(被HP/Compaq淘汰了，应该使用英特尔)。这时，一切都太微不足道，太迟了。<br>
  此前一篇博文引用了Eve Philips的一篇MIT硕士论文(参见http://www.sts.tu-harburg.de/~r.f.moeller/symbolics-info/ AI -business.pdf)，评论文章的人称之为“如果它成功了，它就不是AI:人工智能创业的商业观察”。这是我第一次听说它，但显然她得到了Tom Knight的帮助，Tom Knight是Symbolics的另一位联合创始人，他比我更了解Symbolics的历史，让我们看看她怎么说。<br>
  这看起来很棒。值得一读!她绝对知道自己在说什么，而且读起来很有趣。它给我带回了很多过去的回忆。如果你曾经想要创建一个公司，你可以从阅读像这里一样的“战争故事”中学到很多。<br>
  下面是我阅读时的一些评论。这篇论文的大部分内容都是关于人工智能软件供应商的，但他们的命运对Symbolics有着强烈的影响。<br>
   另一方面，美国国防部高级研究计划局在80年代末削减资金的事实是非常重要的。Symbolics的许多主要市场客户得到了DARPA的资助。<br>
  是的，基于规则的专家系统取得了一些令人兴奋的成功。美国运通公司的“授权人助理”，帮助与您通话的人确保您没有使用美国运通卡，该公司在Symbolics的机器上运行。我在这里了解到，它有45-67%的内部投资回报率，这是非常令人印象深刻的。<br>
  这篇论文有一个时代错误:“提供语言的大型软件公司(即微软)很少提供任何形式的Lisp支持。“这些事件发生时，微软的统治地位已经是几年前的事了。例如，还记得1990年发布的第一个可行的Windows O/S 3.1版本吗?但她的总体观点是正确的。<br>
   她说:“人工智能社区非常傲慢，认为Lisp会改变世界各地计算机系统的运行方式，这并非完全没有道理。这绝对是真的。它并没有听起来那么错误:Lisp的许多想法已经成为主流，特别是managed(garbage-collected)storage，Lisp在面向对象编程方面获得了一些赞誉。毫无疑问，Lisp对Java和c#有着巨大的影响。值得注意的是，微软的公共语言运行时技术目前是由Patrick Dussud领导的，他是第三家MIT-Lisp-machine公司德州仪器的主要Lisp专家。<br>
  但那时候我们真的相信Lisp。我们只对那些试图用C写一个专家系统的人表示蔑视;这是我们企业文化的一部分。我们确实认为Lisp会“改变世界”，就像“六十年代”的人们认为“和平、爱和欢乐”可以改变世界一样。但这并不容易。<br>
  这提醒了我，我对Richard Gabriel所著的<Patterns of Software: Tales from the Software Community>这本书再怎么推荐也不为过，这本书讲述了技术从实验室走向市场的过程。Gabriel是五个主要的 Common Lisp 设计师之一(还有Guy Steele、Scott Fahlman、David Moon和我自己)，但这里的重点远远超出了Lisp。这是以他最初的“Worse is Better”开始的一系列论文的高潮。这里的思想要发达得多。他的见解独特且极具说服力。<br>
  好了，回到Eve Philips:在第五章她描述了“人工智能硬件产业”，从MIT的Lisp machine开始。她做对了吗?她说“14名 AI Lab 黑客加入了他们”;请参阅我之前关于这个数字的文章，但在上下文中，这是一个非常小的问题。故事的其余部分是正确的。(她甚至提到了我上面指出的房地产问题!)她也充分展示了Symbolics 管理和营销的弱点。这是一件优秀的作品。<br>
  Symbolics 是非常有趣的。我们有一段时间非常成功，然后上市了。我的同事是一些技术娴熟、讨人喜欢的技术人员，你可能永远都希望与他们一起工作。我从他们身上学到了很多。我怎么也不会错过的。<br>
  离开后，我以为再也见不到Lisp了。但是现在我发现自己在ITA软件公司，在那里我们正在编写一个巨大的、复杂的事务处理系统(一个新的航空预订系统，最初是为加拿大航空公司开发的)，其核心是Common Lisp。几乎可以肯定，我们拥有世界上最大的公共Lisp程序员团队。我们的开发环境还不错，但我真的希望我能再拥有一台Lisp机器。</p>
<h3 id="more-about-why-symbolics-failed">More about Why Symbolics Failed</h3>
<p>  <a href="http://www.sts.tu-harburg.de/~r.f.moeller/symbolics-info/Symbolics.pdf">Symbolics, Inc: A failure of heterogeneous engineering</a> Alvin Graylin, Kari Anne Hoir Kjolaas, Jonathan Loflin and Jimmie D. WakerIII<br>
  这是一篇优秀的论文，如果对于Symbolics有什么感兴趣，这是必读的。<br>
  这篇论文的论点基于一个名为“heterogeneous engineering”的概念，但除了“运营好一家公司”之外，很难理解他们所说的异质工程是什么意思。他们有很好的方式说你不能只做技术，你必须做市场，销售，财务等等，这是很明显的。他们对Symbolics 的长期愿景有着广泛的不同感受，这是非常正确的，我应该在我的文章中提到这是Symbolics 的最大问题之一。研发的随机变动，常常与公司的其他部门不协调，在这里得到了很好的描述(他们有很好的资源，包括来自Dave Moon 的许多具有特色的、非常诚实的电子邮件)。公司在马萨诸塞州剑桥市的软件部门和位于加州伍德兰山(后来的查兹沃斯)的硬件部门之间的分离也是一个真正的问题。他们说，“一旦资金可用，Symbolics 的花钱就像彩票中奖者和新发现的财富一样”，这是绝对正确的。特性蔓延确实非常猖獗。该论文还提供了一些Symbolics 的财务数据，这些数据很有趣，也很有启发性，显示出1986年的稳步增长，1987年至1989年的收入下降，收入为负。<br>
  这里有一些我不同意的观点。他们表示，“在公司发展的这些年里，Symbolics一直在寻找一位首席执行官”，最终聘请了Brian Sear。我敢肯定，那只是在麻烦开始的时候才发生的。我不同意Brian Sear所说的我们没有照顾到我们现有的客户; 我们在这方面确实很努力，我想这也是很多曾经的Symbolics客户如此怀旧的原因之一。我不认为Russell说的“许多Symbolics Machine 是由研究人员通过星球大战计划资助购买的”是正确的，他们多次重复这一点。然而，许多项目是由美国国防部高级研究计划局资助的，如果你用它来代替所有关于“星球大战”的说法，那么他们说的就是对的。“LISP machine的激增可能已经超过了LISP程序员的激增”的说法是夸张的。没有人想到比研究人员更广阔的市场，这不是真的; 相反，我们打算销售给增值经销商(VAR)和原始设备制造商(OEM)。“VARs and OEMs”这句话实际上是一句咒语。不幸的是，我们只做了一次(ICAD)。虽然他们认为 Sun machines“可以用于许多其他应用程序”是正确的，但有趣的是原因:为什么Sun machine 有许多可用的应用程序?Unix作为可移植平台的兴起(这在当时是一个新概念)和Sun的价格有很大关系。他们不考虑Apollo失败的原因<br>
  感谢各位读者!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[翻译] Lisp：50周年 （1958-2008）]]></title>
        <id>https://alaskasquirrel.github.io/post/Lisp50/</id>
        <link href="https://alaskasquirrel.github.io/post/Lisp50/">
        </link>
        <updated>2020-05-23T08:07:38.000Z</updated>
        <content type="html"><![CDATA[<p>原文：<a href="https://franz.com/services/conferences_seminars/lisp_50th-birthday.lhtml">Lisp's 50th Birthday Celebration</a> by <a href="https://www.dreamsongs.com/Bio.html">Richard P. Gabriel</a></p>
<p>译文：<br>
  事起1958 年 10 月，John McCarthy 发表了一系列关于自己正致力于设计一个适用于人工智能研究的新编程语言的报告中的一篇。该篇报告里首次将这一新编程语言命名为 LISP。此后50 年，Lisp 仍被广泛使用。在过往的 50 年中，伴随着许多变化和调整，并产生出一些在许多方面与其最初设计截然不同的方言，但是它的中心思想仍然不变，使其成为今天仍在使用的最古老的语言之一，仅次于 Fortran。</p>
<p>  第一个 Lisp 的最终实现发表在 1960 年的 Communications of the ACM (CACM) 上。那一版本的 Lisp 首创了几个至今仍被采纳的语言特性：Lisp 引入了一个条件表达式，后来被其他语言拿去作一般性的 if 语句；它引入了递归和第一类 (first-class) 函数，函数式和其他编程语言的核心成分；它引入了变量的引用语义，若没它的话便不会有面向对象编程语言；它引入了符号表达式，通用和统一的数据和程序的表示形式 (被重新发明成 XML)，后者使得程序可以在应用里进行转换；它很早就在编程语言里引入了垃圾收集机制；并且它甚至已经有了一个元数据组合以及基于符号和属性列表的动态派发机制。</p>
<p>  Lisp 无疑是计算机科学史上最具影响力的编程语言之一：Timothy Hart 在 1960 年代为 Lisp 增加了宏；Warren Teitelman 在 60 年代发明了一个 advice 机制，成为了面向对象 (aspect-oriented) 编程的最早先驱；Carl Hewitt 将 Lisp 作为一个开发回溯 (逻辑编程的本质) 和其他 actor 模型的平台；Alan Kay 也承认 Lisp 对于 SmallTalk 的重要影响，后者是第一个明确的面向对象编程语言；Brian Smith 开发了第一个基于续延 (continuation-based) 的 Web 应用；直到今天 Lisp 仍处在即将到来的 Web 3.0 的前沿。</p>
<p>  我们想着庆祝Lisp的50岁生日。而OOPSLA 2008恰是举办这样一场庆祝活动的绝佳场所，因为面向对象编程从Lisp思想中受益匪浅，况且OOPSLA 2008是在10月份举行的，这正好是Lisp问世的50年后。</p>
<p>  John McCarthy已同意做一个关于Lisp早期历史的演讲，他曾在OOPSLA 2007上做了演讲此番再回到了OOPSLA。Guy Steele 和 Richard Gabriel 将展现一组不同寻常的幻灯片，重复他们关于1992年以来Lisp发展的HOPL-II演讲。Pascal Costanza 将谈论Lisp社区最近的发展，这个社区在经历了人工智能的冬天之后，迎来了令人惊讶的复苏。我们将邀请其他有影响力的Lisp，介绍过去50年里Lisp发展的重要方面。最后，我们将举行一个关于Lisp未来50年的公开小组讨论。</p>
<p>  OOPSLA 2008将于10月19日至23日在美国田纳西州的纳什维尔举行。OOPSLA是全世界面向对象编程的主要年度会议，20余年来一直吸引着该领域数最优秀的人才。更多关于OOPSLA 2008的信息，请访问http://oopsla.org 。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Godel on Minds and Machines]]></title>
        <id>https://alaskasquirrel.github.io/post/哥德尔/</id>
        <link href="https://alaskasquirrel.github.io/post/哥德尔/">
        </link>
        <updated>2020-05-21T16:03:43.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>逻辑之旅：从哥德尔到哲学 . 王浩. 第6章 - 心灵与机器：论可计算主义. P231.<br>
  可以设想(虽然远远超过今日科学的界限)，脑生理学将发展到这样的高度，让人们能够在经验上肯定：(1) 人脑足以理解所有的心智现象，它在图灵的意义上就是一台机器; (2)人脑进行数学思维的部分，其物质构造何生理功能不外是如此一般。—— 哥德尔，吉布斯 演讲，1951年.</p>
</li>
<li>
<p>'From Mathematics to Philosophy' 王浩, 1974，P324.<br>
  In Godel’s opinion (as set forth in the unpublished 25th Josiah<br>
Willard Gibbs Lecture13 delivered by him at Providence on Decem­<br>
ber 26, 1951) the two most interesting rigorously proved results<br>
about minds and machines are these:<br>
  1 The human mind is incapable of formulating (or mechanizing)<br>
all its mathematical intuitions. I.e.: If it has succeeded in formulating<br>
some of them, this very fact yields new intuitive knowledge, e.g. the<br>
consistency of this formalism. This fact may be called the‘incom-<br>
pletability’ of mathematics. On the other hand, on the basis of what<br>
has been proved so far, it remains possible that there may exist (and<br>
even be empirically discoverable) a theorem-proving machine which<br>
in fact is equivalent to mathematical intuition, but cannot be proved<br>
to be so, nor even be proved to yield only correct theorems of finitary<br>
number theory.<br>
  2 The second result is the following disjunction: Either the human<br>
mind surpasses all machines (to be more precise: it can decide more<br>
number theoretical questions than any machine) or else there exist<br>
number theoretical questions undecidable for the human mind.</p>
</li>
<li>
<p>Kurt Godel. Collected Works   Volume III , Unpublished essays and lectures .</p>
</li>
<li>
<p>纪志刚  2003年1月 <a href="http://shc2000.sjtu.edu.cn/030104/ganwu.htm">感悟《哥德尔》</a></p>
</li>
</ul>
<p>  有一个人曾在不到两年的时间内让数学界感受了大喜与大悲的经历，他就是哥德尔（Kurt Gödel,1906.4.28-1978.1.14）。<br>
　　1929年秋，哥德尔在他的博士论文中证明了一阶逻辑的完全性，这对于当时试图以“公理化”方法构建数学基础的形式主义学派是一个莫大的鼓舞。希尔伯特，形式主义学派的领军人物，确信他的元数学和证明论将会成功地确立全部数学的相容性和完全性。哥德尔的逻辑完全性定理似乎表明曙光就在前头。1930年夏天，柯尼斯堡，康德的诞生地，也是希尔伯特的故乡，在接受“荣誉市民”受礼仪式的演说中，希尔伯特坚定地说出最后一句话：“我们必须知道，我们必将知道（Wir müssen wissen. Wir werden wissen）”。<br>
　　但就在第二年，哥德尔发表的另一篇论文却打开了“潘多拉的盒子”。这篇题为《论〈数学原理〉及有关系统的形式不可判定命题》（1931年）的论文包含了两个惊世骇俗的结论，其中对数学界尤具毁灭性的断言是：任何数学系统，只要其能包含整数的算术，其相容性就不可能通过几个基础学派（逻辑主义学派、形式主义学派、集合论公理化学派）采用的逻辑原理建立。希尔伯特的幻想破灭了，数学的“灾难”降临了！有人悲叹地说：“上帝是存在的，因为数学无疑是相容的；魔鬼也是存在的，因为我们不能证明这种相容性。”（外尔）<br>
  哥德尔的影响是深远的，最新的一个例子足以说明。2002年夏天北京国际数学家大会，霍金的报告就是《哥德尔与Ｍ理论》。在当今国际物理研究领域，很多科学家提出有可能存在一个能描述一切物理现象的理论，并把这一理论称为超弦理论。霍金认为，建立一个单一的描述宇宙的大统一理论是不太可能的。霍金说他的这一推测正是基于数学领域的哥德尔不完全性定理。<br>
　　可是，哥德尔却一直是一位被神秘所笼罩的传奇人物。他的生活特异独行，超然遁世，他的思想沉奥深邃，意蕴广远。我们中的很多人也许是读了侯世达（Hofstadter,D.R.）的《哥德尔、艾舍尔、巴赫—集异璧之大成》（《GEB—一条永恒的金带》是该书节译本）了解哥德尔的。其实，这部奇书在哥德尔的头上增添了更神秘的光环。感谢王浩先生，他的《哥德尔》（Reflections on Kurt Gödel ,1987，1991，康宏魁译，上海世纪集团出版社，上海译文出版社，2002年9月第1版）一书使我们终于可以走近哥德尔，去感受那平凡躯体下伟大而真诚的心灵。<br>
　　哥德尔的与众不同表现在他的思想、他的关注、他的生活格调、他内心深处的精神世界。王浩先生正是从献身基本理论的角度展开哥德尔的生平的。值得注意的是王浩先生首先将焦点聚集在与哥德尔生平和事业密切相关的三样重要的史料（哥德尔哥哥答复王浩的回信、格兰琼专为哥德尔设计的生平调查表、哥德尔获得洛克菲勒大学荣誉学位时王浩的引荐辞）。正是在许多珍贵史料基础上，王浩为我们仔细勾画了哥德尔毕生事业的全貌。似乎是历史的巧合，当哥德尔几经周折从维也纳抵达普林斯顿后，与爱因斯坦成了结交10年以上的好友。王浩先生巧妙地“假道爱因斯坦”，以对比的手法，描述了两位智者的友谊以及他们在物理、逻辑、哲学、政治、艺术甚至宗教上思想与见解。这样就为读者通达哥德尔的精神思想打开了一条便道。<br>
　　哥德尔的科学工作令人赞叹，这也是王浩先生着力描写的重点。可是，照哥德尔自己说，他一生用于哲学的时间和精力比用于科学的还要多。在哲学中，哥德尔所推崇的5种好品格“善取舍、求准确、弃偏见、慎试验、有胆魄” 确实令人动心。哥德尔的博大视野与敏锐眼光还在他对科学、技术与社会的评述中显示出来。书中披露哥德尔在1962年就指出“人类并不会因为登上月球就有所改进。这必定跟‘自然’科学与‘精神’科学之间的老冲突有关。……如果史学、法权与国家学说、哲学、心理学、文学、艺术等等的进展像物理学那么大，原子战争的危险就不会有了。”读书至此怎能不掩卷感慨！诚可谓“哥德尔的事迹发人深省，其意境超乎学院天地，实在得有一种能顾盼几个世纪的历史眼光才行。”<br>
　　作者王浩先生是著名的数理逻辑学家，早年在西南联大时就自学过哥德尔的初等逻辑完全性证明。后来与晚年的哥德尔频繁往来，广泛交谈，亲笔录下为数可观的口头资料。在他的笔下一个栩栩欲活、个性丰满的哥德尔跃然于纸上。在书中我们看到哥德尔生活的简朴、对荣华富贵的淡漠、做学问的坚韧刻苦、寻求根本原理的矢志不移和锲而不舍。<br>
　　哥德尔处在另一时代，另一环境，他的专深研究也难免让常人觉得高不可攀。那么《哥德尔》对当代青年的意义何在呢？王浩先生“中译本序”的一段话是很有意义的：<br>
　　我想，译者的苦心是盼望一些有识有志的青年人拿他当一面镜子，学会净化自我，学会在荆棘丛中踏出自己该走的路，不论其所爱好的是艺术还是科学、是文科还是理科。哥德尔成功的事实还提醒我们，一个人天赋再高，想获得一点真重要真耐久的成绩，必须对外界诱惑保持清醒的头脑，永不懈怠地埋头苦干，靠众人的喝彩、神秘的灵感或不诚实的手段根本做不到。<br>
　　王浩先生1995年5月病逝于纽约。当我们阅读《哥德尔》的事迹，回味王浩先生的忠告，必然会有一种超然的感悟。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《乡村里的中国》(冷暖人生)]]></title>
        <id>https://alaskasquirrel.github.io/post/农村-农民/</id>
        <link href="https://alaskasquirrel.github.io/post/农村-农民/">
        </link>
        <updated>2020-05-21T14:38:07.000Z</updated>
        <content type="html"><![CDATA[<p>“我从来就不热爱土地”</p>
<p>  赖以生存的土地，却也是这辈子千方百计势要挣脱的枷锁。这里是中国最真实的农村，生活着最朴素的农民。不愿回想昔日的土里土气，而那一面恰是最中国的地方。</p>
<p>  乡村好像很多时候它是沉默的，但是其实它是一个特别广大的真实。因为它在中国所占的比重这么大，但是这一大片的真实，他们怎么活着，其实我们是了解得非常之少。很多时候他是无声的，他们不是发出了很热闹的声响。（凤凰卫视《冷暖人生》）</p>
<ul>
<li><a href="https://v.qq.com/x/cover/i7sc2ih3x6qhzra/f0019al8ax5.html">焦波纪录电影《乡村里的中国》（98分钟院线版）</a></li>
</ul>
<p>好奇心日报：<a href="https://www.qdaily.com/articles/58248.html">中国居民财富总额 18 年增长 1300%，但中位数最近没怎么变</a>.  2018年11月13日,<br>
按照上海发展研究基金会高级研究员刘海影的说法，一旦经济增速无法达到预期，居民工资收入减少，高房价收入比难以维系，人们对房屋的投资性需求将会降低。而这一变化又反过来使跟地产、基建紧紧挂钩的中国经济增速进一步下滑，进一步否定维持高房价的投资理由。对于债务比已经接近 50% 的家庭部门而言，房屋不能变现将直接影响其财富水平。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CPU]]></title>
        <id>https://alaskasquirrel.github.io/post/amd-intel/</id>
        <link href="https://alaskasquirrel.github.io/post/amd-intel/">
        </link>
        <updated>2020-05-20T10:14:38.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.computerhope.com/history/processor.htm">Computer processor history</a><br>
http://www.cpu-zone.com/4004.htm<br>
<img src="https://alaskasquirrel.github.io/post-images/1594604346746.jpg" alt="" loading="lazy"><br>
On the lower right-hand corner of the 4004 chip are the initials F.F. for Federico Faggin, the project leader and author of the silicon design.<br>
<img src="https://alaskasquirrel.github.io/post-images/1594604182852.jpeg" alt="" loading="lazy"><br>
(http://www.intel4004.com/)<br>
http://www.cpu-world.com/CPUs/4004/index.html<br>
<a href="http://www.siga.com.cn/kepu-other-CPU.htm">微处理器（CPU）的发展演变历程</a><br>
<a href="https://zhuanlan.zhihu.com/p/131480417">微处理器</a><br>
<a href="https://www.eet-china.com/mp/a19150.html">首批微处理器的惊人故事</a><br>
<a href="https://www.righto.com/">Ken Shirriff's blog</a></p>
<p>趣闻：<a href="https://hardware.slashdot.org/comments.pl?sid=13046218&amp;cid=57792828">Slashdot</a></p>
<p>We all know how all Intel CPUs are broken, but the why is very important.</p>
<p>AMD invented 64-bit for x86 chips AND invented the first true dual core x64 part. At that time AMD had a massive lead over Intel, and it's god-awful, hyper long pipeline Netburts. Tho outlets like Slashdot and Anandtech informed you, at the time, that Netburst- with its race to 10GHz- was the WINNING architecture.</p>
<p>Then Netburst went bust, and Intel went back to the Pentium 3, updated it with AMD's best ideas (legal due to cross patent agreement) and produced the Core 2 architecture.</p>
<p>But, here's the thing. Intel made the NSA and performance friendly decision to BREAK multi-threading on the CPU.</p>
<p>Proper on-chip multi-threading MUST be 'lock and key'. This means each thread has a unique ID, and that ID acts as a 'key' to open the 'lock' of memory resources that thread has the right to access. Intel NEVER implemented 'lock and key' but AMD always did.</p>
<p>So what did Intel's CHEAT achieve apart from ensuring the NSA always has low level access to your Intel CPU?</p>
<ol>
<li>massively improved memory latency, for the hardware mechanism that implements the 'lock' has a real impact on access speeds.</li>
<li>massive improvements on power efficiency (the lock and key takes power for each memory access)</li>
<li>much higher clock speeds due to 1 and 2</li>
</ol>
<p>In other words, ALL the advantages Intel seemed to have over AMD from the core 2 onwards were down to Intel using an illegal (in CS terms) broken by design CPU architecture.</p>
<p>Today the ONLY way to fix the Intel issue is to run ONE thread at a time on the CPU, and do a complete state flush between multi-tasking thread exchanges. The performance hit would approach 80-95%, which is why no solution uses this extreme but correct adjustment.</p>
<p>Next year, AMD's Zen 2 (ryzen 3) utterly wipes out Intel- and Intel will never recover. But Intel sits on a literal mountain of cash, so expect no end of PAID Intel promotion on sites like Slashdot in the continuing future.</p>
<p>趣闻<a href="https://www.solidot.org/story?sid=59396">中文</a></p>
<p>  AMD 发明了 64 位 x86 芯片，发明了第一个真正的双核 x64 芯片，而当时英特尔和科技新闻网站则在吹它的 NetBurst 微架构，号称能冲击 10GHz。NetBurst 失败了。英特尔回到了奔腾 3，利用与 AMD 签署的交叉专利授权协议使用 AMD 的创意推出了 Core 2 架构。但在此过程中，英特尔做出了让 NSA 开心（削弱安全）以及有利于提升性能的决定，它破坏了 CPU 的多线程设计。正确的 CPU 多线程设计需要有锁和钥匙。每个线程需要有独一的 ID，ID 充当了钥匙去打开线程需要访问的内存资源的锁。英特尔没有实现这一设计，而 AMD 实现了。</p>
<ul>
<li>英特尔的作弊方法所具有的优势包括：<br>
1）极大的改进内存延迟，因为实现锁的硬件机制对访问速度有影响；<br>
2）极大的改进了功耗，因为内存访问的钥匙和锁都有功耗；<br>
3）以上两点让它的频速更高。</li>
</ul>
<p>英特尔 Core 2 架构相对于 AMD 的优势实际上是英特尔破坏 CPU 正确设计实现的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[转载] 霍金：哥德尔和物理学的终结]]></title>
        <id>https://alaskasquirrel.github.io/post/霍金-哥德尔-物理学/</id>
        <link href="https://alaskasquirrel.github.io/post/霍金-哥德尔-物理学/">
        </link>
        <updated>2020-05-19T04:38:26.000Z</updated>
        <content type="html"><![CDATA[<p>原文 http://www.hawking.org.uk/godel-and-the-end-of-physics.html<br>
音频 http://www.damtp.cam.ac.uk/events/strings02/dirac/hawking/<br>
中文 http://cssm.org.cn/view.php?id=3985 中国战略与管理研究会</p>
<p>  本次演讲中，我想问的是，我们在追求理解和知识方面能走多远：我们是否能最终发现一套完备形式的自然规律？我所说的完备形式是指一套规则，这些规则至少原则上可使我们任意精确地预测未来，了解任一时刻宇宙的状态。</p>
<ul>
<li>决定论流传久远</li>
</ul>
<p>  从亚里士多德往后，哲学家和科学家都一直只是定性地认识规律。牛顿在1687年发表了包含其万有引力理论的《自然哲学数学原理》，正是牛顿的这一著作使人们开始来定量和精确地认识规律。这导致了“科学决定论”思想，这种思想大概是由拉普拉斯最先表达的。如果在某一时刻，一个人知道宇宙中所有粒子的位置和速度，那么根据科学规律我们就能计算得出它们在任何其它时刻的位置和速度，无论是过去还是未来。<br>
  20世纪初期，一系列的科学发现诸如放射性原子的衰减似乎是随机发生的，使决定论思想濒于破产，用爱因斯坦的语言来说，似乎是“上帝在掷骰子”。不过，科学界通过重新定义什么是对宇宙的完整理解及更改目标，重新挽救了决定论。这主要是狄拉克的贡献。<br>
  狄拉克表明，薛定谔和海森堡的工作可以整合到对实在进行描述的新图景——量子理论中。在量子理论中，一个粒子不是像在经典牛顿理论中那样用位置和速度两个量来描述，而是用单一量——波函数来描述。</p>
<ul>
<li>打了折的决定论</li>
</ul>
<p>  波函数给出粒子可能在某一点出现的概率和从一个点到另一个点之间运动速度变化的概率，人们可以在波函数中求解到精确的位置或者精确的速度，但不能同时确定两者。乍看这似乎是使完整的决定论变得不可能。因为人们不能同时精确地知道粒子在某一时刻的位置和速度，怎么能预测其未来状况呢？但是在量子理论中，人们不需要同时知道位置和速度两个量。如果一个人知道物理规律及某一时刻的波函数，那他就可用薛定谔方程计算出该波函数随时间变化有多快，进而计算出任何其它时刻的波函数。<br>
  人们因此可以宣称这还是一种决定论，不过这种决定论是一种打了折的决定论。因为人们不能精确地预测位置和速度这两个量，而只能预测波函数一个量。我们得到的是一种被重新定义的决定论，刚好是拉普拉斯所设想的决定论的一半。<br>
  为了计算出波函数如何随时间变化，人们需要了解在整个宇宙都成立的量子规律。因此问题是，我们对这样的规律知道多少？</p>
<ul>
<li>没有理论能预测未来</li>
</ul>
<p>  尽管量子理论以及涉及电磁力的麦克斯韦方程的确适用于绝大部分领域，但还有两个重要的领域在其适用范围之外，一个是核力，一个是引力。核力决定了太阳发光、元素的形成，而引力导致了恒星和行星乃至宇宙本身的形成。所以，为了完整地理解宇宙，至少能够原则上精确地预测各种事物，需要把这些方面都统一起来。<br>
  弱核力已与麦克斯韦方程统一起来，形成电弱统一理论。对强核力，则由另一种不同的理论——称为QCD——加以描述。电弱统一理论和QCD理论加在一起就组成粒子物理学的所谓“标准模型”，其目标是描述除引力外的所有事物。<br>
  尽管标准模型在一切实际用途中都已足够用，但科学家们仍然在孜孜寻求，试图阐发出可以适用于整个宇宙的完备理论。这种追求的动力不在于经济原因。从伽利略以来，没有任何一个科学家是为了金钱而进行基本理论研究的。我们寻求一个完备理论的真正原因是我们想理解宇宙，我们觉得我们不只是黑暗而神秘力量的牺牲品。如果我们认识了宇宙，那么我们就可在某种意义上控制它。而现在的标准模型很清楚不能满足这个要求。<br>
  如果我们要理解宇宙的话，就必须有一个完全协调一致的量子引力理论。在过去30多年间，构建量子引力理论成了理论物理学界的最重大问题。但是这非常困难。<br>
  从1985年以来，我们就认识到超引力和超弦理论都属于一个更大结构，即M－理论，而M－理论不是一种通常意义上的理论，而是一系列理论的集合。该集合中的每一理论在限制条件如低能量或低辐射情况下都成立，但是超出这限制条件就不适用了。这意味着它们中没有任何一个理论能够精确地预测宇宙的未来。</p>
<ul>
<li>我们不是天使</li>
</ul>
<p>  直至目前，大多数人都含蓄地假定存在一种终极理论，我们最终能够发现它。事实上，我本人就曾说过我们会很快找到这个理论。但是M－理论让我怀疑这是否是真的。也许要以有限数量的命题来阐述宇宙终极理论是不可能的。这和哥德尔不完备性定理非常相似，该定理说任何有限公理系统都不足以证明其中的每一个数学命题。<br>
  哥德尔定理和我们是否能以有限数量的原理构建宇宙终极理论有什么关系呢？一个联系是明显的。根据实证论科学哲学，一个物理理论乃是一数学模型。因此如果有数学命题不能证明的话，那就有物理问题不能预测。<br>
  在标准的实证论科学哲学看来，物理理论无偿居住于柏拉图式理想数学模型天国中。也就是说，一个模型可以任意程度地详细，可以包含任意多量的信息，而不会影响它们所描述的宇宙本身。但我们不是天使，可以从外面观察宇宙。相反，我们和我们的模型两者都是我们所描述的宇宙中的组成部分，因此一个物理理论是自指的，就像哥德尔定理所说的那样。人们因此可以认为它或者是不一致的，或者是不完备的。我们迄今所有的各种物理理论既是不一致的，也是不完备的。<br>
  如果不存在一种可从有限条数原理推导出来的终极理论，一些人将非常失望。我过去就属于这个阵营。但是我已改变了我的看法。现在我很高兴我们寻求知识的努力永远都不会到达终点，我们始终都有获得新发现的挑战。没有这种挑战，我们就会停滞。哥德尔定理保证了数学家们总有事情要做，我想M－理论也将为物理学家们做同样的事情。（凌高/摘译）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[年轻摄影师的“旧中国梦”]]></title>
        <id>https://alaskasquirrel.github.io/post/旧中国影像/</id>
        <link href="https://alaskasquirrel.github.io/post/旧中国影像/">
        </link>
        <updated>2020-05-18T15:24:49.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>（封面 Felice Beato, North and East Corner of the Wall of Pekin, 1860）</li>
</ul>
<p>【一席】王溪：把100多年前国外所有关于中国的影像集合在一起，第一名的关键词大伙猜是什么？</p>
<ul>
<li>https://www.bilibili.com/video/av15920063</li>
</ul>
<p><img src="https://alaskasquirrel.github.io/post-images/1591199092647.jpg" alt="" loading="lazy"><br>
Panorama of Peking, Taken from the South Gate, Leading into the Chinese City<br>
Felice Beato (English.born Italy, 1832-1909)<br>
Henry Hering (British 1814-1893)<br>
negative October 1860, print 1862.</p>
]]></content>
    </entry>
</feed>